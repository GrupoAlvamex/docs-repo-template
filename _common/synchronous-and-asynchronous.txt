.. _common-dg-sync:

Synchronous versus asynchronous responses
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Synchronous**

*Synchronous* responses occur at request time. Synchronous responses contains all or some
of same elements as found in the :ref:`response body <common-dg-status-body>` attached
to an HTTP status code.

**GET** requests often return *synchronous* responses, since the request is always
retrieving existing information.

.. _common-dg-sync-async:

# Asynchronous section should only be included with the following guides:
  Cloud Servers, Cloud Load Balancers, Cloud CDN, Cloud Block Storage, Cloud DNS,
  Cloud Big Data, Cloud Databases, Cloud Orchestration, Cloud Backup

**Asynchronous**

*Asynchronous* responses occur in the background while an instance, database, or
user is being built or an instance is executing an action.

**PUT**, **POST**, and **DELETE** requests return *asynchronous* responses. These
responses take some time to process. Therefore an *asynchronous* response return
``202 Accepted`` responses containing information with a callback URL, which allows the progress,
status, and/or response information of the call to be retrieved at a later point in time.

When an asynchronous request returns an error, the system places the instance, database,
or user in an ERROR state and embeds the fault in the offending instance, database, or user.

Asynchronous responses contain these elements:

**Attributes for asynchronous responses**

jobId
   An identifier for the specific request.
   Inclusion: Basic and Detail

callbackUrl
   Resource locator for querying the status of the request.
   Inclusion: Basic and Detail

status
   An indicator of the request status: INITIALIZED, RUNNING, COMPLETED, or
   ERROR.
   Inclusion: Basic and Detail

.. note::
   INITIALIZED is the status that immediately precedes RUNNING and is
   the first possible state of a job. It indicates acceptance of the job.

requestUrl
   The url of the original request.
   Inclusion: Detail only

verb
   The type of the original request: PUT, POST, or DELETE.
   Inclusion: Detail only

request
   The original request data, if any.
   Inclusion: Detail only

response
   The results of a COMPLETE operation, if any.
   Inclusion: Detail only

error
   The results of an ERROR operation.
   Inclusion: Detail only

..  note::
    Note that an asynchronous operation, if it fails, may not give the user an error,
    and the operation can error out without a failure notification.

The asynchronous response body will look similar to the following
examples, depending on whether basic or detailed information is
requested.

If an error occurs as a result of processing the original request,
querying the callback URL will return the information about the error.
If you use the callback URL without specifying the query parameter
``showDetails=true``, only basic information is provided:

.. _common-dg-sync-async-example:

**Example: Basic error asynchronous response, XML**

.. code::

    Status: 200 OK
    Date: Thu, 28 Jul 2011 21:54:21 GMT
    X-API-VERSION: 1.0.17
    Content-Type: application/xml
    Content-Length: 451

    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <asyncresponse xmlns:ns2="http://www.w3.org/2005/Atom" xmlns="http://docs.rackspacecloud.com/dns/api/v1.0" xmlns:ns3="http://docs.rackspacecloud.com/dns/api/management/v1.0">
        <jobId>e63886c9-acf0-4e5d-8023-09a0fae37446</jobId>
        <callbackUrl>https://dns.api.rackspacecloud.com/v1.0/1234/status/e63886c9-acf0-4e5d-8023-09a0fae37446</callbackUrl>
        <status>ERROR</status>
    </asyncresponse>

**Example: Basic error asynchronous response, JSON**

.. code::

    Status: 200 OK
    Date: Thu, 28 Jul 2011 21:54:21 GMT
    X-API-VERSION: 1.0.17
    Content-Type: application/json
    Content-Length: 186

    {
      "status" : "ERROR",
      "jobId" : "e63886c9-acf0-4e5d-8023-09a0fae37446",
      "callbackUrl" : "https://dns.api.rackspacecloud.com/v1.0/1234/status/e63886c9-acf0-4e5d-8023-09a0fae37446"
    }

If you use the callback URL with the query parameter
``showDetails=true``, then detailed information is provided:

**Example: Detail error asynchronous response, XML**

.. code::

    Status: 200 OK
    Date: Thu, 28 Jul 2011 21:54:21 GMT
    X-API-VERSION: 1.0.17
    Content-Type: application/xml
    Content-Length: 847

    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <asyncresponse xmlns:ns2="http://www.w3.org/2005/Atom" xmlns="http://docs.rackspacecloud.com/dns/api/v1.0" xmlns:ns3="http://docs.rackspacecloud.com/dns/api/management/v1.0">
        <jobId>e63886c9-acf0-4e5d-8023-09a0fae37446</jobId>
        <callbackUrl>https://dns.api.rackspacecloud.com/v1.0/1234/status/e63886c9-acf0-4e5d-8023-09a0fae37446</callbackUrl>
        <status>ERROR</status>
        <requestUrl>https://dns.api.rackspacecloud.com/v1.0/1234/domains</requestUrl>
        <verb>POST</verb>
        <request>{
            "domains" : [ {
            "name" : "example.com",
            "emailAddress" : "admin@example.com"
            } ]
            }
        </request>
        <error code="409">
            <message>The object already exists.</message>
            <details>Domain already exists</details>
        </error>
    </asyncresponse>

**Example: Detail error asynchronous response, JSON**

.. code::

    Status: 200 OK
    Date: Thu, 28 Jul 2011 21:54:21 GMT
    X-API-VERSION: 1.0.17
    Content-Type: application/json
    Content-Length: 564

    {
      "status" : "ERROR",
      "error" : {
        "message" : "The object already exists.",
        "code" : 409,
        "details" : "Domain already exists"
      },
      "request" : "{\n        \"domains\" : [ {\n        \"name\" : \"example.com\",\n        \"emailAddress\" : \"admin@example.com\"\n        } ]\n        }\n    ",
      "verb" : "POST",
      "jobId" : "e63886c9-acf0-4e5d-8023-09a0fae37446",
      "callbackUrl" : "https://dns.api.rackspacecloud.com/v1.0/1234/status/e63886c9-acf0-4e5d-8023-09a0fae37446",
      "requestUrl" : "https://dns.api.rackspacecloud.com/v1.0/1234/domains"
    }
